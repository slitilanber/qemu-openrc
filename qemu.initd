#!/sbin/openrc-run
# vim: set ft=sh: ts=4:
# source: https://github.com/jirutka/qemu-openrc

VERSION='0.8.1'
VM_NAME="${RC_SVCNAME#qemu.}"

: ${user:=qemu}
: ${group:=qemu}
: ${pidfile:=/run/qemu/${VM_NAME}/qemu.pid}
: ${logfile:=/var/log/qemu/${VM_NAME}.log}
: ${shutdown_timeout:=40}
: ${system_type:=x86_64}
: ${boot_order:=cdn}
: ${enable_kvm:=yes}
: ${enable_virtio:=yes}
: ${enable_ovmf:=no}
: ${enable_audio:=no}
: ${enable_sata_controller1:=no}
: ${enable_sata_controller2:=no}
: ${enable_usb_controller:=yes}
: ${enable_usb_passthrough:=no}
: ${enable_pci_passthrough:=no}
: ${enable_qemu_agent:=no}
: ${enable_spice:=no}
: ${enable_spice_folder_share:=no}
: ${enable_spice_streaming_video:=no}
: ${spice_port:=5930}
: ${spice_auth:=disable-ticketing}
: ${spice_streaming_video:=all}
: ${spice_video_encoding:=host}
: ${rng_filename:=/dev/random}
: ${cpu_model:=host}
: ${smp_cpus:=1}
: ${smp_cpus_max:=$smp_cpus}
: ${memory:=1G}
: ${memory_max:=$memory}
: ${memory_slots:=2}
: ${memory_hugepages:=no}
: ${rtc_base:=utc}
: ${keyboard:=en-us}
: ${vga:=std}
: ${vnc_listen:=0.0.0.0}
: ${hugepages_path:=/dev/hugepages}
: ${monitor_socket:=/run/qemu/${VM_NAME}/monitor.sock}
: ${extra_args:=}

name="VM $VM_NAME"
description="QEMU virtual machine \"$VM_NAME\""

extra_commands='forcestop version'
description_forcestop='Force stop the system'
description_version='Show version of this script'

extra_started_commands='reset resume suspend vmstatus'
description_reset='Reset the system'
description_resume='Resume suspended VM'
description_suspend='Suspend running VM'
description_vmstatus='Show status reported by QEMU'

command="/usr/bin/qemu-system-$system_type"
command_args="
	-machine type=q35
	-name $VM_NAME,process=$VM_NAME
	-nodefaults
	-no-user-config
	-k $keyboard
	-cpu $cpu_model
	-overcommit mem-lock=off
	-rtc base=$rtc_base
	-smp cpus=$smp_cpus,maxcpus=$smp_cpus_max
	-vga $vga
	-monitor unix:$monitor_socket,server,nowait
	-boot order=$boot_order,menu=on,strict=on,reboot-timeout=1000"
command_background='yes'

start_stop_daemon_args="
	--user=$user
	--wait=100
	--stdout=$logfile
	--stderr=$logfile"

required_files="$command"

depend() {
	need net
	after iptables ip6tables ebtables
}

start_pre() {
	if [ "$RC_SVCNAME" = 'qemu' ]; then
		eerror ''
		eerror 'You are not supposed to run this runscript directly. Instead, you should'
		eerror 'create a symlink for the VM you want to run as well as a copy of the'
		eerror 'configuration file and modify it appropriately, like so:'
		eerror ''
		eerror '    ln -s qemu /etc/init.d/qemu.example'
		eerror '    cp /etc/conf.d/qemu /etc/conf.d/qemu.example'
		return 1
	fi

	if yesno "$enable_kvm"; then
		command_args_push '-enable-kvm'
	fi

	if yesno "$enable_virtio"; then
		command_args_push "-device virtio-balloon-pci -device virtio-scsi-pci,id=scsi $(rng_args)"
	fi
	
	if yesno "$enable_ovmf"; then
		cp /usr/share/OVMF/OVMF_VARS.fd /run/qemu/${VM_NAME}/OVMF_VARS_${VM_NAME}.fd
		chown -R $user:$group /run/qemu/${VM_NAME}/OVMF_VARS_${VM_NAME}.fd
		command_args_push "
			-drive if=pflash,format=raw,readonly,file=/usr/share/OVMF/OVMF_CODE.fd
			-drive if=pflash,format=raw,file=/run/qemu/${VM_NAME}/OVMF_VARS_${VM_NAME}.fd"
	fi	

	if [ "$memory" = "$memory_max" ]; then
		memory_slots="0"
	fi

	command_args_push "-m size=$memory,slots=$memory_slots,maxmem=$memory_max"

	if yesno "$memory_hugepages"; then
		command_args_push "-mem-path $hugepages_path"
	fi

	if [ -n "$vnc_display" ]; then
		command_args_push "-display vnc=${vnc_listen}:${vnc_display}${vnc_password:+",password"}"
	fi
	
	if yesno "$enable_usb_controller"; then
		command_args_push "$(usb_controller)"
	fi

	if yesno "$enable_audio"; then
		command_args_push "-device ich9-intel-hda,id=sound0 -device hda-duplex,cad=0"
	fi

	if yesno "$enable_qemu_agent"; then
		command_args_push "$(qga_args)"
	fi

	if yesno "$enable_spice"; then
		command_args_push "$(spice_args)"
	fi
	
	if yesno "$enable_usb_passthrough"; then
		[ "$user" != 'root' ] && { eerror 'ERROR: USB Passthrough needs root permissions.'; return 1; }
		command_args_push "$(usb_args)"
	fi
	
	if yesno "$enable_pci_passthrough"; then
		[ "$user" != 'root' ] && { eerror 'ERROR: PCI Passthrough needs root permissions'; return 1; }
		command_args_push "$(pci_args)"
	fi

	command_args_push "$(net_args) $(disk_args) $(cdrom_args) $extra_args"

	if yesno "$EINFO_VERBOSE"; then
		einfo "Command: $command $(printf '%s ' $command_args)"
	fi

	local path; for path in "$pidfile" "$monitor_socket" "$logfile"; do
		# checkpath doesn't create intermediate directories
		mkdir -p "$(dirname "$path")"
		checkpath -d -m 0750 -o $user:$group "$(dirname "$path")"
	done

	return 0
}

start_post() {
	ewaitfile 5 "$monitor_socket" || { eerror 'Monitor socket has not been created!'; return 1; }
	if [ -n "$vnc_password" ]; then
		qemush "set_password vnc $vnc_password" || eerror 'Failed to set VNC password!'
	fi
}

stop() {
	local count=0
	local retval=0

	ebegin "Stopping $name"

	if is_running && qemush 'system_powerdown'; then
		count="$shutdown_timeout"

		printf "   Waiting $count seconds for VM shutdown "
		while is_running && [ $count -gt 0 ]; do
			sleep 1
			printf '.'
			count=$(( count - 1 ))
		done
		printf '\n'
	fi

	if [ $count -eq 0 ]; then
		ewarn 'Failed to shutdown VM gracefully using ACPI, stopping it with force'

		start-stop-daemon --stop \
			--quiet --retry 'SIGKILL/5' \
			--pidfile "$pidfile" --exec "$command"
		retval="$?"
	fi

	eend $retval
}

stop_post() {
	[ -S "$monitor_socket" ] && rm -f "$monitor_socket"
	[ -f "$pidfile" ] && rm -f "$pidfile"
	[ -f "/run/qemu/${VM_NAME}/OVMF_VARS_${VM_NAME}.fd" ] && rm -f "/run/qemu/${VM_NAME}/OVMF_VARS_${VM_NAME}.fd"
	[ -S "/run/qemu/${VM_NAME}/qga.sock" ] && rm -f "/run/qemu/${VM_NAME}/qga.sock"
	return 0
}

forcestop() {
	ebegin "Force stopping $name"

	start-stop-daemon --stop \
		--quiet --retry 'SIGKILL/3' \
		--pidfile "$pidfile" --exec "$command"
	local retval="$?"

	if [ $retval -eq 0 ]; then
		if service_started "$RC_SVCNAME"; then
			mark_service_stopped "$RC_SVCNAME"
		fi
		stop_post
	fi

	eend $retval
}

reset() {
	ebegin "Resetting $name"

	qemush 'system_reset'
	eend $?
}

resume() {
	ebegin "Resuming suspended $name"

	qemush 'cont'
	eend $?
}

suspend() {
	ebegin "Suspending $name"

	qemush 'stop'
	eend $?
}

vmstatus() {
	qemush_show 'info status' | tr -d '\r' | xargs einfo
}

version() {
	echo "qemu-openrc $VERSION"
}

#-------------------------------- Helpers -------------------------------

is_running() {
	[ -e "$pidfile" ] && kill -0 "$(cat "$pidfile")" 2>/dev/null
}

command_args_push() {
	command_args="$command_args $@"
}

disk_args() {
	local idx file type format cache if opts

	[ "$enable_sata_controller1" = 'yes' ] && echo "-device ich9-ahci,id=ahci0,multifunction=on"
	[ "$enable_sata_controller2" = 'yes' ] && echo "-device ich9-ahci,id=ahci1,multifunction=on"

	for idx in $(seq 0 11); do
		file=$(getval "disk${idx}_file")
		type=$(getval "disk${idx}_type")
		format=$(getval "disk${idx}_format")
		cache=$(getval "disk${idx}_cache" none)
		if=$(getval "disk${idx}_if" none)
		opts=$(getval "disk${idx}_opts")
		if [ -n "$file" ] ; then
			if [ "$type" = 'virtio-scsi' ]; then
				[ "$enable_virtio" != 'yes' ] && { eerror "virtio has been disabled, can't use virtio-scsi."; return 1; }
				echo "-drive file=$file,id=virtio-scsi${idx},format=${format},cache=${cache},media=disk,if=${if}${opts}"
				echo "-device scsi-hd,drive=virtio-scsi${idx},scsi-id=${idx},id=scsi${idx}"
			fi
			if [ "$type" = 'sata' ] && [ "${idx}" -lt 6 ]; then
				echo "-drive file=$file,id=sata-disk${idx},format=${format},cache=${cache},media=disk,if=${if}${opts}"
				echo "-device ide-hd,bus=ahci0.${idx},drive=sata-disk${idx},id=sata${idx}"
			fi
			if [ "$type" = 'sata' ] && [ "${idx}" -ge 6 ]; then
				echo "-drive file=$file,id=sata-disk${idx},format=${format},cache=${cache},media=disk,if=${if}${opts}"
				echo "-device ide-hd,bus=ahci1.$((${idx} - 6)),drive=sata-disk${idx},id=sata${idx}"
			fi
		fi
	done
}

rng_args() { 
	filename=$(getval "rng_filename" /dev/random)
	[ "$filename" = '/dev/hwrng' ] && [ "$user" != 'root' ] && { eerror "ERROR: /dev/hwrng needs root permissions"; return 1; }
	echo "-object rng-random,filename=$filename,id=rng0 -device virtio-rng-pci,rng=rng0"
}

qga_args() {
	echo "-chardev socket,path=/run/qemu/${VM_NAME}/qga.sock,server,nowait,id=qga0"
	[ "$enable_virtio" = 'yes' ] && echo "-device virtio-serial -device virtserialport,chardev=qga0,name=org.qemu.guest_agent.0"
	[ "$enable_virtio" != 'yes' ] && echo "-device isa-serial,chardev=qga0,id=serial0"
}

pci_args() {
	local idx pci_bus pci_opts

	for idx in $(seq 0 9); do
		pci_bus=$(getval "pci${idx}_bus")
		pci_opts=$(getval "pci${idx}_opts")
		
		[ -n "$pci_bus" ] && echo "-device vfio-pci,host=$pci_bus${pci_opts}"
	done
}

usb_args() {
	local idx type hostbus hostport vid pid

	for idx in $(seq 0 9); do
		type=$(getval "usb${idx}_type")
		hostbus=$(getval "usb${idx}_hostbus")
		hostport=$(getval "usb${idx}_hostport")
		vid=$(getval "usb${idx}_vendorid")
		pid=$(getval "usb${idx}_productid")

		[ "$type" = "hostport" ] && echo "-device usb-host,hostbus=$hostbus,hostport=$hostport"
		[ "$type" = "productid" ] && echo "-device usb-host,vendorid=$vid,productid=$pid"
	done
}

usb_controller() {
	echo "	-machine usb=on
		-device usb-tablet
		-device ich9-usb-ehci1,id=usb
		-device ich9-usb-uhci1,masterbus=usb.0,firstport=0,multifunction=on
		-device ich9-usb-uhci2,masterbus=usb.0,firstport=2 
        	-device ich9-usb-uhci3,masterbus=usb.0,firstport=4
        	-device nec-usb-xhci,id=usb2"
}

spice_args() {
	[ "$enable_virtio" != 'yes' ] && { eerror 'ERROR: virtio has been disabled, could not enable spice.'; return 1; }

	if [ "$enable_spice_streaming_video" = 'yes' ] && [ "$spice_video_encoding" = 'host' ]; then
		streaming_video=",streaming-video=${spice_streaming_video}"
	else
		stream_video=''
	fi

	echo "  -spice port=${spice_port},${spice_auth},seamless-migration=on${streaming_video}	
		-device virtio-serial-pci
		-device virtserialport,chardev=spicechannel0,name=com.redhat.spice.0
		-chardev spicevmc,id=spicechannel0,name=vdagent"

	if [ "$enable_spice_streaming_video" = 'yes' ] && [ "$spice_video_encoding" = 'client' ]; then
		echo " 	-device virtserialport,chardev=streamchannel0,name=org.spice-space.stream.0
			-chardev spiceport,name=org.spice-space.stream.0,id=streamchannel0"
	fi

	if [ "$enable_spice_folder_share" = 'yes' ]; then
		echo "	-device virtserialport,chardev=webdavchannel0,name=org.spice-space.webdav.0
			-chardev spiceport,name=org.spice-space.webdav.0,id=webdavchannel0"
	fi

	[ "$enable_usb_controller" != 'yes' ] && { eerror 'ERROR: usb controller has been disabled, could not enable usb redirection for spice.'; return 1; }
	echo "	-chardev spicevmc,name=usbredir,id=usbredirchardev1 -device usb-redir,chardev=usbredirchardev1,id=usbredirdev1
		-chardev spicevmc,name=usbredir,id=usbredirchardev2 -device usb-redir,chardev=usbredirchardev2,id=usbredirdev2 
		-chardev spicevmc,name=usbredir,id=usbredirchardev3 -device usb-redir,chardev=usbredirchardev3,id=usbredirdev3"
}

cdrom_args() {
	local idx file

	for idx in $(seq 0 5); do
		file=$(getval "cdrom${idx}_file")
		
		# Attach up to 6 CDROMs to the built-in ich9-ahci controller in Q35 Vms.
		[ -n "$file" ] && echo "-drive file=$file,media=cdrom,if=ide,readonly,cache=none,node-name=cdr${idx}"
	done
}

net_args() {
	local idx net_id net_type opts mac dev

	for idx in $(seq 0 9); do
		net_id="net${idx}"
		net_type=$(getval "$net_id")

		[ "$net_type" = 'bridge' ] && check_bridge "$(getval ${net_id}_br br0)"

		if [ -n "$net_type" ]; then
			# comma-separated key=value pairs; contains trailing comma if not empty
			opts=$(set | sed -En "s/^net${idx}_(.*)/\1/p" | grep -Ev '^(mac|device)=.*$' | tr $'\n' ',')
			mac=$(getval ${net_id}_mac "$(gen_macaddr ${VM_NAME}#${idx})")
			dev=$(getval ${net_id}_device virtio-net-pci)

			echo "-netdev ${net_type},${opts}id=hostnet${idx}"
			echo "-device ${dev},id=${net_id},netdev=hostnet${idx},mac=${mac}"
		fi
	done
}

check_bridge() {
	local name="$1"

	[ ! -e "/sys/class/net/$name" ] && { ewarn "WARNING: Bridge $name does not exist"; return 1; }

	if [ "$user" != 'root' ] \
			&& ! grep -q "^allow\s*$name\W*" /etc/qemu/bridge.conf 2>/dev/null; then
		ewarn "WARNING: Bridge $name must be allowed in /etc/qemu/bridge.conf"
		return 1
	fi
}

qemush() {
	local IFS=$'\n'
	echo -e "$*" | socat - "UNIX-CONNECT:${monitor_socket}" 1>/dev/null
}

qemush_show() {
	local IFS=$'\n'
	echo -e "$*" | socat - "UNIX-CONNECT:${monitor_socket}" | tail -n +3 | head -n -1
}

gen_macaddr() {
	printf "$1" | md5sum | sed -E 's/^(..)(..)(..)(..).*$/52:54:\1:\2:\3:\4/'
}

getval() {
	local var_name="$1"
	local default="${2:-}"

	eval "printf '%s\n' \"\${$var_name:-$default}\""
}
